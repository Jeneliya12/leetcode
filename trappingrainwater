import java.util.PriorityQueue;

public class TrappingRainWaterII {
    private static class Cell implements Comparable<Cell> {
        int row, col, height;

        Cell(int row, int col, int height) {
            this.row = row;
            this.col = col;
            this.height = height;
        }

        @Override
        public int compareTo(Cell other) {
            return this.height - other.height;
        }
    }

    public int trapRainWater(int[][] heightMap) {
        if(heightMap == null || heightMap.length == 0 || heightMap[0].length == 0) return 0;

        int m = heightMap.length;
        int n = heightMap[0].length;
        boolean[][] visited = new boolean[m][n];
        PriorityQueue<Cell> minHeap = new PriorityQueue<>();

        // Add all boundary cells to the heap and mark them as visited
        for(int i = 0; i < m; i++) {
            minHeap.offer(new Cell(i, 0, heightMap[i][0]));
            minHeap.offer(new Cell(i, n-1, heightMap[i][n-1]));
            visited[i][0] = true;
            visited[i][n-1] = true;
        }

        for(int j = 1; j < n-1; j++) {
            minHeap.offer(new Cell(0, j, heightMap[0][j]));
            minHeap.offer(new Cell(m-1, j, heightMap[m-1][j]));
            visited[0][j] = true;
            visited[m-1][j] = true;
        }

        int[][] directions = {{1,0}, {-1,0}, {0,1}, {0,-1}};
        int waterTrapped = 0;
        int maxHeight = 0;

        while(!minHeap.isEmpty()) {
            Cell current = minHeap.poll();
            maxHeight = Math.max(maxHeight, current.height);

            for(int[] dir : directions) {
                int newRow = current.row + dir[0];
                int newCol = current.col + dir[1];

                if(newRow >=0 && newRow < m && newCol >=0 && newCol < n && !visited[newRow][newCol]) {
                    visited[newRow][newCol] = true;
                    if(heightMap[newRow][newCol] < maxHeight) {
                        waterTrapped += maxHeight - heightMap[newRow][newCol];
                    }
                    minHeap.offer(new Cell(newRow, newCol, Math.max(heightMap[newRow][newCol], maxHeight)));
                }
            }
        }

        return waterTrapped;
    }

    public static void main(String[] args) {
        TrappingRainWaterII solution = new TrappingRainWaterII();
        int[][] heightMap1 = {
            {1,4,3,1,3,2},
            {3,2,1,3,2,4},
            {2,3,3,2,3,1}
        };
        System.out.println("Trapped Water: " + solution.trapRainWater(heightMap1)); // Output: 4

        int[][] heightMap2 = {
            {12,13,1,12},
            {13,4,13,12},
            {13,8,10,12},
            {12,13,12,12},
            {13,13,13,13}
        };
        System.out.println("Trapped Water: " + solution.trapRainWater(heightMap2)); // Output: 14
    }
}
